#!/usr/bin/env bash
# Compatible with both bash and zsh

# MCP Vector Search Installer
# Single script to install and manage mcp-vector-search in any project

set -e

# Configuration
DEV_PATH="/Users/masa/Projects/managed/mcp-vector-search"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
print_error() { echo -e "${RED}❌ $1${NC}"; }
print_success() { echo -e "${GREEN}✅ $1${NC}"; }
print_warning() { echo -e "${YELLOW}⚠️ $1${NC}"; }
print_info() { echo -e "${BLUE}ℹ️ $1${NC}"; }

show_help() {
    echo "🚀 MCP Vector Search Installer"
    echo "=============================="
    echo
    echo "Single script to install and manage mcp-vector-search in any project."
    echo
    echo "USAGE:"
    echo "  $0 [directory] [options...]             Install mcp-vector-search (default)"
    echo "  $0 install [directory] [options...]     Install mcp-vector-search"
    echo "  $0 demo                                 Run installation demo"
    echo "  $0 shell-setup                         Show shell integration setup"
    echo "  $0 --help, -h                          Show this help"
    echo
    echo "INSTALL OPTIONS:"
    echo "  directory           Directory to install in (default: current directory)"
    echo
    echo "INSTALL OPTIONS (passed to init main):"
    echo "  --force            Re-initialize existing project"
    echo "  --no-mcp           Skip MCP integration"
    echo "  --no-auto-index    Skip initial indexing"
    echo "  --extensions LIST  Custom file extensions (e.g., .py,.js,.ts)"
    echo
    echo "EXAMPLES:"
    echo "  $0                                      # Install in current directory"
    echo "  $0 ~/my-project                         # Install in specific directory"
    echo "  $0 . --no-mcp                           # Install without MCP integration"
    echo "  $0 ~/project --force                    # Force re-install"
    echo "  $0 demo                                 # Run demo with sample project"
    echo "  $0 shell-setup                         # Show shell integration commands"
    echo
}

install_mcp_vector_search() {
    local target_dir="${1:-$(pwd)}"
    shift || true  # Remove first argument

    echo "🚀 MCP Vector Search - Project Setup"
    echo "===================================="
    echo
    echo "📁 Target project: $target_dir"
    echo "🔧 Development source: $DEV_PATH"
    echo

    # Check if development environment exists
    if [ ! -d "$DEV_PATH" ]; then
        print_error "Development environment not found at $DEV_PATH"
        echo "Please ensure mcp-vector-search is cloned and set up there."
        exit 1
    fi

    # Check if target directory exists
    if [ ! -d "$target_dir" ]; then
        print_error "Target directory does not exist: $target_dir"
        exit 1
    fi

    print_info "Running enhanced init command..."
    echo

    # Change to development directory and run the enhanced init command
    cd "$DEV_PATH"

    # Run the init command and capture output
    if uv run mcp-vector-search --project-root "$target_dir" init main "$@" 2>/dev/null; then
        echo
        print_success "Setup completed for: $target_dir"
        echo
        echo "🔍 Next steps:"
        echo "   cd $target_dir"
        echo "   mcp-vector-search search 'your query'"
        echo "   mcp-vector-search status main"
        echo
    else
        exit_code=$?
        echo
        if [ $exit_code -eq 0 ] || [ $exit_code -eq 1 ]; then
            # Both 0 and 1 can indicate already initialized (depending on version)
            print_info "Project is already initialized and ready to use!"
            echo
            echo "🚀 Your project is set up with:"
            echo "   ✅ Vector database and semantic search"
            echo "   ✅ Auto-indexing for file changes"
            echo "   ✅ Claude Code MCP integration"
            echo
            echo "🔍 Ready to use:"
            echo "   • Search your code: cd $target_dir && mcp-vector-search search 'your query'"
            echo "   • Check status: cd $target_dir && mcp-vector-search status main"
            echo "   • Use --force to re-initialize if needed"
            echo
            print_success "Setup completed for: $target_dir"
        else
            print_error "Setup failed with exit code: $exit_code"
            echo
            echo "💡 Try:"
            echo "   • Use --force to re-initialize: $0 --force"
            echo "   • Check the logs for more details"
            echo
            exit $exit_code
        fi
    fi
}

run_demo() {
    echo "🚀 MCP Vector Search - Installation Demo"
    echo "========================================"
    echo

    # Create a test project
    local test_dir="/tmp/mcp-demo-$(date +%s)"
    print_info "Creating test project at: $test_dir"
    mkdir -p "$test_dir"

    # Create sample files
    print_info "Creating sample code files..."

    cat > "$test_dir/main.py" << 'EOF'
def fibonacci(n):
    """Calculate the nth Fibonacci number."""
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

def main():
    print("Fibonacci sequence:")
    for i in range(10):
        print(f"F({i}) = {fibonacci(i)}")

if __name__ == "__main__":
    main()
EOF

    cat > "$test_dir/utils.js" << 'EOF'
// Utility functions for the application
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

module.exports = { debounce };
EOF

    cat > "$test_dir/README.md" << 'EOF'
# Demo Project

This is a demonstration project for mcp-vector-search.

## Features
- Python Fibonacci calculator
- JavaScript utility functions
- Semantic code search capabilities
EOF

    print_success "Sample project created!"
    echo
    echo "📋 Project contents:"
    ls -la "$test_dir"
    echo

    print_info "Running installation..."
    install_mcp_vector_search "$test_dir"

    echo
    print_success "Demo completed!"
    echo "📁 Test project location: $test_dir"
    echo
    echo "🔍 You can now test search functionality:"
    echo "   cd $test_dir"
    echo "   mcp-vector-search search 'fibonacci function'"
    echo "   mcp-vector-search search 'debounce utility'"
    echo
    echo "🧹 To clean up: rm -rf $test_dir"
}

show_shell_setup() {
    echo "🐚 Shell Integration Setup"
    echo "========================="
    echo
    echo "Add these functions to your ~/.zshrc or ~/.bashrc:"
    echo
    cat << 'EOF'
# MCP Vector Search functions
mcp-install() {
    /Users/masa/Projects/managed/mcp-vector-search/mcp-vector-search-install install "$@"
}

mcp-demo() {
    /Users/masa/Projects/managed/mcp-vector-search/mcp-vector-search-install demo
}

mcp-dev() {
    local dev_path="/Users/masa/Projects/managed/mcp-vector-search"
    cd "$dev_path" && uv run mcp-vector-search "$@"
}
EOF
    echo
    echo "Then reload your shell and use:"
    echo "  mcp-install                    # Install in current directory"
    echo "  mcp-install ~/my-project       # Install in specific directory"
    echo "  mcp-demo                       # Run installation demo"
    echo "  mcp-dev --help                 # Run from dev environment"
    echo
}

# Main script logic
case "${1:-}" in
    "install")
        shift
        install_mcp_vector_search "$@"
        ;;
    "demo")
        run_demo
        ;;
    "shell-setup")
        show_shell_setup
        ;;
    "--help"|"-h"|"help")
        show_help
        ;;
    "")
        # Default behavior: install in current directory
        install_mcp_vector_search
        ;;
    *)
        # Check if first argument is an option (starts with --)
        if [[ "$1" == --* ]]; then
            # Treat as install command with options, use current directory
            install_mcp_vector_search "$(pwd)" "$@"
        # Check if first argument looks like a directory path
        elif [[ -d "$1" ]] || [[ "$1" == "." ]] || [[ "$1" == ~* ]] || [[ "$1" == /* ]]; then
            # Treat as install command with directory
            install_mcp_vector_search "$@"
        else
            print_error "Unknown command: $1"
            echo
            show_help
            exit 1
        fi
        ;;
esac
